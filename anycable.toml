# AnyCable server configuration.
# Read more at https://docs.anycable.io/anycable-go/configuration

# General settings

# Public mode disables connection authentication, pub/sub streams and broadcasts verification
# public = false

# Disable connection authentication only
# noauth = false

# Application instance ID
# node_id = "<auto-generated at each server start>"

# The application secret key
secret = "secrettos"

# Broadcasting adapters for app-to-clients messages
broadcast_adapters = ["http"]

# Broadcasting authorization key
# broadcast_key = "<auto-generated from the application secret>"

# Pub/sub adapter for inter-node communication
# pubsub_adapter = "redis" # or "nats"

# User-provided configuration presets
presets = ["broker"]

# Pusher compatibility configuration
[pusher]
# The public app key for Pusher clients
app_id = "123456"
secret = "reverb_secret"
app_key = "reverb_key"

# Server configuration
[server]
# Host address to bind to
host = "localhost"
# Port to listen on
port = 8080
# Allowed origins (a comma-separated list)
allowed_origins = ""
# Maximum number of allowed concurrent connections
# max_conn = 1000
# Health check endpoint path
health_path = "/health"
# SSL configuration
# ssl.cert_path =
# ssl.key_path =

# Logging configuration
[logging]
# Logging level (debug, info, warn, error)
level = "info"
# Logs formatting (e.g., 'text' or 'json')
format = "text"
# Enable debug (verbose) logging
# debug = true

# RPC configuration
[rpc]
# RPC implementation (grpc, http, or none)
implementation = ""
# RPC service hostname (including port, e.g., 'anycable-rpc:50051')
host = "localhost:50051"
# Specify HTTP headers that must be proxied to the RPC service
proxy_headers = ["cookie"]
# Specify which cookies must be kept in the proxied Cookie header
# proxy_cookies = ["_session_id"]
# RPC concurrency (max number of concurrent RPC requests)
concurrency = 28
# Enable client-side TLS on RPC connections
# enable_tls = true
# Enable TLS Verify for RPC connections
tls_verify = true
# CA root TLS certificate path
tls_root_ca_path = ""
# HTTP RPC specific settings
# Secret for HTTP RPC authentication
# secret =
# Timeout for RPC requests (in ms)
# request_timeout = 3000
# Total timeout for RPC commands including retries (in ms)
command_timeout = 3000
# GRPC fine-tuning
# Max allowed incoming message size (bytes)
max_recv_size = 0
# Max allowed outgoing message size (bytes)
max_send_size = 0

# Broker configuration
[broker]
# Broker backend adapter
# adapter = "memory"
# For how long to keep streams history (seconds)
history_ttl = 300
# Max number of messages to keep in a stream history
history_limit = 100
# For how long to store sessions state for resumeability (seconds)
sessions_ttl = 300
# For how long to keep presence information after session disconnect (seconds)
presence_ttl = 15

# JWT configuration
[jwt]
# Secret key
# secret = "secret"
# Parameter name (an URL query or a header name carrying a token, e.g., `x-<param>`)
param = "jid"
# Enfore JWT authentication
# force = true

# Pub/sub (signed) streams configuration
[streams]
# Secret key used to sign and verify pub/sub streams
# secret = "secret"
# Enable public (unsigned) streams
public = true
# Enable whispering support for pub/sub streams
# whisper = true
# Enable presence support for pub/sub streams
presence = true
# Name of the channel used for pub/sub
pubsub_channel = "$pubsub"
# Enable Turbo Streams support
# turbo = true
# Custom secret key used to verify Turbo Streams
# turbo_secret = ""
# Enable CableReady support
# cable_ready = true
# Custom secret key used to verify CableReady streams
# cable_ready_secret = ""

# WebSockets configuration
[ws]
# WebSocket endpoint paths
paths = ["/cable"]
# Read buffer size
read_buffer_size = 4096
# Write buffer size
write_buffer_size = 4096
# Maximum message size
max_message_size = 65536
# Write timeout (seconds)
write_timeout = 2
# Maximum pending size
max_pending_size = 1048576

# SSE configuration
[sse]
# Enable Server-sent events support
# enabled = true
# Server-sent events endpoint path
path = "/events"

# Redis configuration
[redis]
# Redis instance URL or master name in case of sentinels usage
# or list of URLs if cluster usage
url = "redis://localhost:6379"
# Channel name for pub/sub (node-to-node)
internal_channel = "__anycable_internal__"
# Sentinel addresses (comma-separated list)
sentinels = ""
# Sentinel discovery interval (seconds)
sentinel_discovery_interval = 30
# Keepalive ping interval (seconds)
keepalive_ping_interval = 30
# Enable TLS Verify
# tls_verify = true
# Max number of reconnect attempts
max_reconnect_attempts = 5
# Disable client-side caching
# disable_cache = true

# NATS configuration
[nats]
# NATS server URLs (comma-separated)
servers = "nats://127.0.0.1:4222"
# Don't randomize servers during connection
# dont_randomize_servers = true
# Max number of reconnect attempts
max_reconnect_attempts = 5

# Broadcast adapters configuration
[http_broadcast]
# HTTP server port (can be the same as the main server port)
port = 8080
# HTTP endpoint path for broadcasts
path = "/_broadcast"
# Secret token to authenticate broadcasting requests
# secret = ""
# Enable CORS headers (allowed origins are used as allowed hosts)
# cors_headers = false

[redis_stream_broadcast]
# Redis stream name for broadcasts
stream = "__anycable__"
# Stream consumer group name
group = "bx"
# Streams read wait time in milliseconds
stream_read_block_milliseconds = 2000

[redis_pubsub_broadcast]
channel = "__anycable__"

[nats_broadcast]
channel = "__anycable__"

# Pub/sub adapters configuration
[redis_pubsub]
channel = "__anycable_internal__"

[nats_pubsub]
channel = "__anycable_internal__"

# Metrics configuration
[metrics]
# HTTP endpoint (Prometheus)
# http = "/metrics"
# Standalone metrics HTTP server host to bind to
# host = "localhost"
# Metrics HTTP server port to listen on
# (can be the same as the main server's port)
port = 8080
# Enable metrics logging
# log = true
# Log rotation interval (seconds)
rotate_interval = 15
# Log filter (show only selected metrics)
# log_filter = []
# Metrics tags
# tags.key = "value"
# StatsD configuration
# statsd.host = ""
# statsd.prefix = "anycable_go."
# statsd.tags_format = "datadog"
# statsd.max_packet_size = 1400

# App configuration
[app]
# Server-to-client heartbeat interval (seconds)
ping_interval = 3
# Timestamp format for ping messages (s, ms, or ns)
ping_timestamp_precision = "s"
# Client-to-server pong timeout (seconds)
# pong_timeout = 6
# Define when to invoke Disconnect RPC callback
disconnect_mode = "auto"
# Graceful shutdown period (seconds)
shutdown_timeout = 30
# How often to refresh system-wide metrics (seconds)
stats_refresh_interval = 5
# The number of Go routines to use for broadcasting (server-to-client fan-out)
broadcast_gopool_size = 16
# The number of Go routines to use for Disconnect RPC calls on shutdown
shutdown_disconnect_gopool_size = 16

# Disconnector configuration
[disconnector]
# Limit the number of Disconnect RPC calls per second
rate = 100
# Queue size for disconnect requests
backlog = 4096

# Embedded NATS configuration
[embedded_nats]
# enabled = true
#
# Verbose  logging settings
# debug = true
# trace = true
#
# Service name
name = ""
#
# Service address
service_addr = "nats://127.0.0.1:4222"
#
# Cluster configuration
#
# cluster_addr = ""
# cluster_name = "anycable-cluster"
# gateway_addr = ""
# gateway_advertise = ""
# gateways = []
# routes = []
#
# JetStream configuration
#
# jetstream = true
# jetstream_store_dir = ""
# jetstream_ready_timeout = 30
